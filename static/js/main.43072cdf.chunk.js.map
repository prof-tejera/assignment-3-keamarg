{"version":3,"sources":["TimerProvider.js","components/documentation/DocumentComponent.js","components/generic/Loading.js","utils/helpers.js","components/generic/Button.js","components/generic/DisplayTime.js","components/generic/Panel.js","utils/css.js","components/generic/Settings.js","utils/hooks.js","components/generic/Timer.js","components/generic/Navbar.js","views/DocumentationView.js","views/TimersView.js","views/AddView.js","App.js","index.js"],"names":["TimerContext","createContext","setBtnState","console","log","setSettingsState","TimerProvider","children","useState","btnState","settingsState","time","setTime","rounds","setRounds","rest","setRest","isRunning","setIsRunning","savedTime","setSavedTime","docs","setDocs","message","setMessage","showMessage","setShowMessage","currentRound","setCurrentRound","showSettingsMessage","setShowSettingsMessage","showTimerRounds","setShowTimerRounds","currentRest","setCurrentRest","localStorage","getItem","timerType","setTimerType","Provider","value","Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","props","title","component","propDocs","map","doc","i","prop","description","type","defaultValue","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","defaultProps","COLORS","BUTTONS","reset","start","stop","settings","forward","ready","back","notReady","add","BTNTYPE","TIMERS","MESSAGES","timerValue","timer","fullTime","Date","toISOString","hours","substr","minutes","seconds","deciSeconds","Btn","button","Button","styleName","onClick","inner","disabled","className","Display","label","DisplayTime","useContext","style","id","slice","Panel","SettingsBtn","css","ReadyBtn","NotReadyBtn","BackBtn","PulseAnim","PulseAnim2","ColorAnim","SetInput","input","Text","p","Settings","setHours","setMinutes","setSeconds","restHours","setRestHours","restMinutes","setRestMinutes","restSeconds","setRestSeconds","handleTimerChange","e","target","name","Number","useEffect","handleRestChange","htmlFor","onKeyDown","preventDefault","min","max","step","onChange","placeholder","useTimer","delay","callback","savedCallback","useRef","current","setInterval","clearInterval","useInterval","getMessage","h1","UpperPanel","LowerPanel","Middlepanel","SettingsPanel","Message","Timer","handleClickSettingsReady","t","currentTarget","NavList","ul","links","path","Navbar","handleClick","innerHTML","setItem","link","index","to","exact","activeClassName","Timers","App","routes","key","AddPanel","Selector","select","Add","AddView","DocumentationView","TimersView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43072cdf.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const TimerContext = createContext({\n  setBtnState: () => {\n    console.log(\"setBtnState: Im outside the Timerprovider\");\n  },\n  setSettingsState: () => {\n    console.log(\"setSettingsState: Im outside the Timerprovider\");\n  },\n});\n\n// I had different experiments going, but ended up wrapping one big provider around the whole app.\n\nconst TimerProvider = ({ children }) => {\n  const [btnState, setBtnState] = useState(true);\n  const [settingsState, setSettingsState] = useState(true);\n  // const [stopwatchTimer, setStopwatchTimer] = useState(true);\n  // const [stopwatchSettings, setStopwatchSettings] = useState(false);\n  // const [countdownTimer, setCountdownTimer] = useState(true);\n  // const [countdownSettings, setCountdownSettings] = useState(false);\n  // const [xyTimer, setXyTimer] = useState(true);\n  // const [xySettings, setXySettings] = useState(false);\n  // const [tabataTimer, setTabataTimer] = useState(true);\n  // const [tabataSettings, setTabataSettings] = useState(false);\n  const [time, setTime] = useState(0);\n  const [rounds, setRounds] = useState(1);\n  const [rest, setRest] = useState(1);\n  const [isRunning, setIsRunning] = useState(false);\n  const [savedTime, setSavedTime] = useState(0);\n  const [docs, setDocs] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showMessage, setShowMessage] = useState(false);\n  const [currentRound, setCurrentRound] = useState(rounds);\n  const [showSettingsMessage, setShowSettingsMessage] = useState(false);\n  const [showTimerRounds, setShowTimerRounds] = useState(true);\n  const [currentRest, setCurrentRest] = useState(false);\n  const [timerType, setTimerType] = useState(\n    localStorage.getItem(\"timerType\")\n      ? localStorage.getItem(\"timerType\")\n      : \"Stopwatch\"\n  );\n\n  return (\n    <TimerContext.Provider\n      value={{\n        timerType,\n        setTimerType,\n        currentRest,\n        setCurrentRest,\n        showTimerRounds,\n        setShowTimerRounds,\n        showSettingsMessage,\n        setShowSettingsMessage,\n        currentRound,\n        setCurrentRound,\n        message,\n        setMessage,\n        showMessage,\n        setShowMessage,\n        docs,\n        setDocs,\n        savedTime,\n        setSavedTime,\n        isRunning,\n        setIsRunning,\n        time,\n        setTime,\n        rounds,\n        setRounds,\n        rest,\n        setRest,\n        btnState,\n        setBtnState,\n        settingsState,\n        setSettingsState,\n        // stopwatchTimer,\n        // setStopwatchTimer,\n        // stopwatchSettings,\n        // setStopwatchSettings,\n        // countdownTimer,\n        // setCountdownTimer,\n        // countdownSettings,\n        // setCountdownSettings,\n        // xyTimer,\n        // setXyTimer,\n        // xySettings,\n        // setXySettings,\n        // tabataTimer,\n        // setTabataTimer,\n        // tabataSettings,\n        // setTabataSettings,\n      }}\n    >\n      {children}\n    </TimerContext.Provider>\n  );\n};\n\nexport default TimerProvider;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = (props) => {\n  return (\n    <Wrapper>\n      <Title>{props.title}</Title>\n      <Container>\n        <RenderComponent>{props.component}</RenderComponent>\n        <Documentation>\n          <tbody>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </tbody>\n          {props.propDocs.map((doc, i) => {\n            return (\n              <tbody key={i}>\n                <tr>\n                  <td>{doc.prop}</td>\n                  <td>{doc.description}</td>\n                  <td>{doc.type}</td>\n                  <td>\n                    <code>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              </tbody>\n            );\n          })}\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = (props) => {\n  const size = sizeMapping[props.size];\n  const { color } = props;\n\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n    </Container>\n  );\n};\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\n// import DisplayTime from \"../components/generic/DisplayTime\";\n\n//Colors used\nexport const COLORS = {\n  countdown: \"#316E94\",\n  stopwatch: \"#3FA2E0\",\n  xy: \"#E0BB34\",\n  tabata: \"#4E1394\",\n  purple: \"#7C28E0\",\n  start: \"#26DB5C\",\n  stop: \"#DB4E4E\",\n  reset: \"#2F333B\",\n  text: \"#FAF9F6\",\n  nav: \"#231F20\",\n};\n\n//Bootstrap icons for the buttons\nexport const BUTTONS = {\n  reset: \"bi bi-arrow-counterclockwise\",\n  start: \"bi bi-play-circle\",\n  stop: \"bi bi-pause-circle\",\n  settings: \"bi bi-gear\",\n  forward: \"bi bi-skip-forward-circle\",\n  ready: \"bi bi-check-circle\",\n  back: \"bi bi-arrow-left-circle\",\n  notReady: \"bi bi-circle\",\n  add: \"bi bi-plus-circle\",\n};\n\nexport const BTNTYPE = {\n  reset: \"reset\",\n  start: \"start\",\n  stop: \"stop\",\n  settings: \"settings\",\n  forward: \"forward\",\n  ready: \"ready\",\n  back: \"back\",\n  notReady: \"notReady\",\n  add: \"add\",\n};\n\nexport const TIMERS = {\n  stopwatch: \"Stopwatch\",\n  countdown: \"Countdown\",\n  xy: \"XY\",\n  tabata: \"Tabata\",\n};\n\n// export const INPUTS = {\n//   timer: \"timer\",\n//   rounds: \"rounds\",\n//   rest: \"rest\",\n// };\n\nexport const MESSAGES = {\n  finished: \"Well done!\",\n  settimer: \"Check your settings\",\n  rest: \"Rest now\",\n  work: \"Work!\",\n  work2: \"Back to work!\",\n  boost1: \"Almost there!\",\n  boost2: \"That's more like it!\",\n  boost3: \"Ya call that working?\",\n  boost4: \"Come on!\",\n  boost5: \"Keep going!\",\n};\n\n// Function for converting the seconds to a more human friendly format\n\nexport const timerValue = (value, timer) => {\n  const fullTime = new Date(value * 1000).toISOString();\n  const hours = fullTime.substr(12, 1);\n  const minutes = fullTime.substr(14, 2);\n  const seconds = fullTime.substr(17, 2);\n  const deciSeconds = fullTime.substr(20, 1);\n  if (timer) {\n    return [hours, minutes, seconds, deciSeconds];\n  } else {\n    return hours + \"h \" + minutes + \"m \" + seconds + \"s\";\n  }\n};\n\n// Function providing messages\nexport const getMessage = (currentRound) => {\n  switch (currentRound) {\n    case 1:\n      return MESSAGES.finished;\n    case 2:\n      return MESSAGES.boost1;\n    case 3:\n      return MESSAGES.boost2;\n    case 4:\n      return MESSAGES.boost3;\n    case 5:\n      return MESSAGES.boost4;\n    default:\n      return MESSAGES.boost5;\n  }\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { COLORS, BUTTONS, BTNTYPE } from \"../../utils/helpers\";\n\nconst Btn = styled.button`\n  border-radius: 0.3rem;\n  border: none;\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: ${COLORS.text};\n  transition: 0.2s ease;\n  :hover {\n    opacity: 0.6;\n  }\n\n  background-color: ${(props) =>\n    props.value === BTNTYPE.start\n      ? COLORS.start\n      : props.value === BTNTYPE.stop\n      ? COLORS.stop\n      : COLORS.reset};\n`;\n\nconst Button = (props) => {\n  Button.defaultProps = {\n    styleName: \"none\",\n    value: \"none\",\n    onClick: null,\n  };\n  const { value, styleName, onClick, inner, disabled } = props;\n  return (\n    <Btn\n      className={styleName}\n      value={value}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {inner}\n      <i className={BUTTONS[value] ? BUTTONS[value] : BUTTONS.start}></i>\n    </Btn>\n  );\n};\nButton.propTypes = {\n  styleName: PropTypes.string,\n  value: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport styled from \"styled-components\";\nimport { timerValue, COLORS } from \"../../utils/helpers.js\";\n\nconst Display = styled.label`\n  margin-bottom: 2rem;\n  font-size: 3rem;\n  font-weight: 300;\n  // font-family: \"Orbitron\", sans-serif;\n  #minutes,\n  #seconds {\n    display: inline-block;\n    width: 6rem;\n  }\n  #hours {\n    display: inline-block;\n    width: 5rem;\n  }\n  #deciSeconds {\n    display: inline-block;\n    width: 1rem;\n    font-size: 1rem;\n  }\n`;\n\nconst DisplayTime = () => {\n  const { time } = useContext(TimerContext);\n  const { currentRest } = useContext(TimerContext);\n\n  return (\n    <Display style={{ color: `${currentRest ? COLORS.stop : COLORS.text}` }}>\n      <span id=\"hours\">{timerValue(time, true).slice(0, 1)}h</span>\n      <span id=\"minutes\">{timerValue(time, true).slice(1, 2)}m</span>\n      <span id=\"seconds\">{timerValue(time, true).slice(2, 3)}s</span>\n      {/* <span id=\"deciSeconds\"> {timerValue(time, true).slice(3)}</span> */}\n      {/* {timerValue(time)} */}\n    </Display>\n  );\n};\n\nexport default DisplayTime;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { COLORS, TIMERS } from \"../../utils/helpers.js\";\n\nconst Container = styled.div`\n  // border: 1px solid black;\n  width: 20rem;\n  background-color: ${(props) =>\n    props.type === TIMERS.stopwatch\n      ? COLORS.stopwatch\n      : props.type === TIMERS.countdown\n      ? COLORS.countdown\n      : props.type === TIMERS.xy\n      ? COLORS.xy\n      : COLORS.tabata};\n  font-size: 2rem;\n  border-radius: 0rem 0rem 0.3rem 0.3rem;\n`;\n\nconst Panel = (props) => {\n  Panel.defaultProps = {\n    timerType: \"Stopwatch\",\n  };\n  return (\n    <Container type={props.timerType} className=\"mainPanel\">\n      {props.children}\n    </Container>\n  );\n};\n\nPanel.propTypes = {\n  timerType: PropTypes.string,\n};\n\nexport default Panel;\n","import { css } from \"styled-components\";\nimport { COLORS } from \"../utils/helpers\";\n\n//buttons\n\nexport const SettingsBtn = css`\n  z-index: 1;\n  font-size: 1.5rem;\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n  background-color: transparent;\n`;\n\nexport const ReadyBtn = css`\n  z-index: 1;\n  font-size: 3rem;\n  bottom: 1rem;\n  //   margin: 0 auto;\n  background-color: transparent;\n  animation: PulseAnim2 1s ease forwards;\n`;\n\nexport const NotReadyBtn = css`\n  z-index: 1;\n  font-size: 3rem;\n  bottom: 1rem;\n  //   margin: 0 auto;\n  background-color: transparent;\n  opacity: 0.1;\n  :hover {\n    opacity: 0.2;\n  }\n`;\n\nexport const BackBtn = css`\n  z-index: 1;\n  font-size: 1.5rem;\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n  background-color: transparent;\n`;\n\n//animations\nexport const PulseAnim = css`\n  @keyframes PulseAnim {\n    0% {\n      color: ${COLORS.stop};\n      transform: scale(1);\n    }\n    10% {\n      color: ${COLORS.stop};\n      transform: scale(1.1);\n    }\n\n    100% {\n      color: ${COLORS.stop};\n      transform: scale(1);\n    }\n  }\n`;\n\nexport const PulseAnim2 = css`\n  @keyframes PulseAnim2 {\n    0% {\n      color: ${COLORS.start};\n    }\n    50% {\n      transform: scale(1.1);\n    }\n    100% {\n      transform: scale(1);\n      color: ${COLORS.start};\n    }\n  }\n`;\n\nexport const ColorAnim = css`\n  @keyframes ColorAnim {\n    0% {\n      color: black;\n    }\n    100% {\n      color: ${COLORS.stop};\n    }\n  }\n`;\n","import styled from \"styled-components\";\nimport { TIMERS } from \"../../utils/helpers.js\";\n// import PropTypes from \"prop-types\";\nimport { COLORS } from \"../../utils/helpers.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\n\nconst SetInput = styled.input`\n  // border: 1px solid black;\n  color: ${(props) =>\n    props.type === TIMERS.stopwatch\n      ? COLORS.stopwatch\n      : props.type === TIMERS.countdown\n      ? COLORS.countdown\n      : props.type === TIMERS.xy\n      ? COLORS.xy\n      : COLORS.tabata};\n  font-size: 0.8rem;\n  border-radius: 0.5rem;\n  border: 0px;\n  width: 4rem;\n  padding-left: 1rem;\n  margin: 0.2rem;\n  border: 1px solid grey;\n  border-style: outset;\n  &::-webkit-inner-spin-button {\n    opacity: 1;\n  }\n`;\n\n// const Credentials = styled.p`\n//   font-size: 0.8rem;\n//   color: ${COLORS.text};\n//   padding-top: 0.5rem;\n// `;\n\nconst Text = styled.p`\n  font-size: 1rem;\n  color: ${COLORS.text};\n  padding-top: 0.5rem;\n  margin-block-start: 0;\n  margin-block-end: 0;\n`;\n\nconst Settings = (props) => {\n  // const { timerType } = props;\n\n  // Settings.defaultProps = {\n  //   timerType: TIMERS.countdown,\n  // };\n\n  const { setTime } = useContext(TimerContext);\n  const { setRounds } = useContext(TimerContext);\n  const { setRest } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n  const { timerType } = useContext(TimerContext);\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [restHours, setRestHours] = useState(0);\n  const [restMinutes, setRestMinutes] = useState(0);\n  const [restSeconds, setRestSeconds] = useState(0);\n\n  //Timer handler\n  const handleTimerChange = (e) => {\n    if (!docs) {\n      if (e.target.name === \"hours\") {\n        setHours(e.target.value * 3600);\n      }\n      if (e.target.name === \"minutes\") {\n        setMinutes(e.target.value * 60);\n      }\n      if (e.target.name === \"seconds\") {\n        setSeconds(Number(e.target.value));\n      }\n    }\n  };\n\n  useEffect(() => {\n    setTime(hours + minutes + seconds);\n  }, [hours, minutes, seconds, setTime]);\n\n  //Round handler\n  const handleRoundChange = (e) => {\n    if (!docs) {\n      setRounds(e.target.value);\n    }\n  };\n\n  //Rest handler\n  const handleRestChange = (e) => {\n    if (!docs) {\n      if (e.target.name === \"hours\") {\n        setRestHours(e.target.value * 3600);\n      }\n      if (e.target.name === \"minutes\") {\n        setRestMinutes(e.target.value * 60);\n      }\n      if (e.target.name === \"seconds\") {\n        setRestSeconds(Number(e.target.value));\n      }\n    }\n  };\n\n  useEffect(() => {\n    setRest(restHours + restMinutes + restSeconds);\n  }, [restHours, restMinutes, restSeconds, setRest]);\n\n  // Inputs will not work on mobile due to the onKeyDown, preventing keyboard input\n  return (\n    <div className=\"w-100\">\n      <>\n        <Text>\n          <label htmlFor=\"hours\">Set workout time</label>\n        </Text>\n        <SetInput\n          onKeyDown={(e) => e.preventDefault()}\n          name=\"hours\"\n          type=\"number\"\n          min=\"0\"\n          max=\"9\"\n          step=\"1\"\n          onChange={handleTimerChange}\n          placeholder=\"H\"\n        ></SetInput>\n        <SetInput\n          onKeyDown={(e) => e.preventDefault()}\n          name=\"minutes\"\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          step=\"1\"\n          onChange={handleTimerChange}\n          placeholder=\"MM\"\n        ></SetInput>\n        <SetInput\n          onKeyDown={(e) => e.preventDefault()}\n          name=\"seconds\"\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          step=\"1\"\n          onChange={handleTimerChange}\n          placeholder=\"SS\"\n        ></SetInput>\n      </>\n      {timerType === TIMERS.xy || timerType === TIMERS.tabata ? (\n        <>\n          <Text>\n            <label htmlFor=\"rounds\">Set number of rounds</label>\n          </Text>\n          <SetInput\n            name=\"rounds\"\n            type=\"number\"\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            onChange={handleRoundChange}\n            placeholder=\"1-10\"\n          ></SetInput>\n        </>\n      ) : null}\n      {timerType === TIMERS.tabata ? (\n        <>\n          <Text>\n            <label htmlFor=\"rest\">Set rest time</label>\n          </Text>\n          <SetInput\n            name=\"hours\"\n            type=\"number\"\n            min=\"0\"\n            max=\"9\"\n            step=\"1\"\n            onChange={handleRestChange}\n            placeholder=\"H\"\n          ></SetInput>\n          <SetInput\n            name=\"minutes\"\n            type=\"number\"\n            min=\"0\"\n            max=\"59\"\n            step=\"1\"\n            onChange={handleRestChange}\n            placeholder=\"MM\"\n          ></SetInput>\n          <SetInput\n            name=\"seconds\"\n            type=\"number\"\n            min=\"0\"\n            max=\"59\"\n            step=\"1\"\n            onChange={handleRestChange}\n            placeholder=\"SS\"\n          ></SetInput>\n        </>\n      ) : null}\n      {/* <Credentials>By Martin Gundtoft</Credentials> */}\n    </div>\n  );\n};\n\n// Settings.propTypes = {\n//   timerType: PropTypes.string,\n// };\n\nexport default Settings;\n","import { useContext, useRef, useEffect, useState } from \"react\";\nimport { TimerContext } from \"../TimerProvider\";\nimport { TIMERS, getMessage, MESSAGES } from \"./helpers\";\n\nexport const useTimer = (timerType) => {\n  const [delay] = useState(1000);\n  const { isRunning, setIsRunning } = useContext(TimerContext);\n  const { time, setTime } = useContext(TimerContext);\n  const { setBtnState } = useContext(TimerContext);\n  const { setShowMessage } = useContext(TimerContext);\n  const { setMessage } = useContext(TimerContext);\n  const { currentRound, setCurrentRound } = useContext(TimerContext);\n  const { savedTime } = useContext(TimerContext);\n  const { currentRest, setCurrentRest } = useContext(TimerContext);\n  const { rest } = useContext(TimerContext);\n\n  // Code inspired by the article Nico shared (reference in readme)\n  useInterval(\n    () => {\n      //stopwatch\n      if (timerType === TIMERS.stopwatch) {\n        setTime(Number(time) + 1);\n        if (Number(time) === Number(savedTime) - 1) {\n          setIsRunning(false);\n          setBtnState(true);\n          setShowMessage(true);\n          setMessage(MESSAGES.finished);\n        }\n      }\n      //countdown\n      if (timerType === TIMERS.countdown) {\n        if (Number(time) > 1) {\n          setTime(Number(time) - 1);\n        } else {\n          setIsRunning(false);\n          setTime(0);\n          setBtnState(true);\n          setShowMessage(true);\n          setMessage(MESSAGES.finished);\n        }\n      }\n      //xy\n      if (timerType === TIMERS.xy) {\n        if (Number(time) > 1) {\n          setTime(Number(time) - 1);\n        } else if (currentRound > 1) {\n          setCurrentRound((rounds) => rounds - 1);\n          setTime(savedTime);\n          setShowMessage(true);\n          setMessage(getMessage(currentRound));\n        } else if (Number(time) === 1 && currentRound === 1) {\n          setCurrentRound(0);\n          setTime(0);\n          setBtnState(true);\n          setIsRunning(false);\n          setShowMessage(true);\n          setMessage(MESSAGES.finished);\n        }\n      }\n\n      //tabata\n      if (timerType === TIMERS.tabata) {\n        if (!currentRest) {\n          if (Number(time) > 1) {\n            setTime(Number(time) - 1);\n            setShowMessage(true);\n            setMessage(MESSAGES.work);\n          } else if (currentRound > 0) {\n            setTime(rest);\n            setCurrentRest(true);\n            setShowMessage(true);\n            setMessage(MESSAGES.rest);\n          }\n        }\n        if (currentRest) {\n          if (Number(time) > 1) {\n            setTime(Number(time) - 1);\n          } else if (currentRound > 1) {\n            setCurrentRound((rounds) => rounds - 1);\n            setTime(savedTime);\n            setCurrentRest(false);\n            setShowMessage(true);\n            setMessage(MESSAGES.work2);\n          } else if (Number(time) === 1 && currentRound === 1) {\n            setCurrentRound(0);\n            setTime(0);\n            setBtnState(true);\n            setIsRunning(false);\n            setShowMessage(true);\n            setMessage(MESSAGES.finished);\n          }\n        }\n      }\n    },\n    isRunning ? delay : null\n  );\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest function.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n};\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport styled from \"styled-components\";\nimport {\n  PulseAnim,\n  PulseAnim2,\n  ColorAnim,\n  SettingsBtn,\n  NotReadyBtn,\n  BackBtn,\n  ReadyBtn,\n} from \"../../utils/css\";\nimport Panel from \"../generic/Panel\";\nimport Settings from \"../generic/Settings\";\nimport Button from \"../generic/Button\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport {\n  BTNTYPE,\n  COLORS,\n  TIMERS,\n  MESSAGES,\n  timerValue,\n} from \"../../utils/helpers\";\nimport { useTimer } from \"../../utils/hooks\";\n\nconst Title = styled.h1`\n  color: ${COLORS.text};\n`;\nconst UpperPanel = styled.div`\n  position: relative;\n  height: 15rem;\n  .false {\n    animation: PulseAnim 1s ease 1s infinite, ColorAnim 0.5s ease forwards;\n  }\n  ${PulseAnim};\n  ${ColorAnim};\n\n  i.stopwatch {\n    font-size: 10rem;\n    opacity: 40%;\n    display: block;\n  }\n  .settingsBtn {\n    ${SettingsBtn}\n  }\n`;\nconst LowerPanel = styled.div`\n  height: 15rem;\n  .ctaBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    background-color: transparent;\n  }\n`;\nconst Middlepanel = styled.div`\n  height: 5rem;\n  padding-top: 4rem;\n  .ctaBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    background-color: transparent;\n    line-height: 1rem;\n  }\n`;\n\nconst SettingsPanel = styled.div`\n  position: relative;\n  height: 25rem;\n  .settingsBtn {\n    ${SettingsBtn}\n  }\n  .readyBtn {\n    position: absolute;\n    ${ReadyBtn}\n  }\n\n  ${PulseAnim2}\n\n  .notReadyBtn {\n    position: absolute;\n    ${NotReadyBtn}\n  }\n\n  .backBtn {\n    ${BackBtn}\n  }\n`;\nconst Message = styled.p`\n  color: ${COLORS.text};}\n  line-height: 2rem;\n  font-size:1.5rem;\n`;\n\nconst Timer = () => {\n  const { time, setTime } = useContext(TimerContext);\n  const { isRunning, setIsRunning } = useContext(TimerContext);\n  const { btnState, setBtnState } = useContext(TimerContext);\n  const { settingsState, setSettingsState } = useContext(TimerContext);\n  const { savedTime, setSavedTime } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n  const { rounds } = useContext(TimerContext);\n  const { currentRound, setCurrentRound } = useContext(TimerContext);\n  const { message, setMessage } = useContext(TimerContext);\n  const { showMessage, setShowMessage } = useContext(TimerContext);\n  const { showSettingsMessage, setShowSettingsMessage } =\n    useContext(TimerContext);\n  const { showTimerRounds, setShowTimerRounds } = useContext(TimerContext);\n  const { currentRest, setCurrentRest } = useContext(TimerContext);\n  const { timerType } = useContext(TimerContext);\n  const { rest } = useContext(TimerContext);\n\n  // Click handler for all buttons (refactored to seperate handlers)\n\n  // Start/stop button\n  const handleClickStartStop = (e) => {\n    if (!docs) {\n      const t = Number(time);\n      if (\n        e.currentTarget.value === BTNTYPE.start ||\n        e.currentTarget.value === BTNTYPE.stop\n      ) {\n        if (\n          timerType === TIMERS.stopwatch &&\n          Number(time) !== Number(savedTime)\n        ) {\n          setIsRunning(!isRunning);\n          setBtnState(!btnState);\n        }\n        if (timerType !== TIMERS.stopwatch && t) {\n          setIsRunning(!isRunning);\n          setBtnState(!btnState);\n        }\n      }\n    }\n  };\n\n  //Reset button\n  const handleClickReset = (e) => {\n    if (!docs) {\n      if (timerType === TIMERS.stopwatch) {\n        setTime(0);\n      } else {\n        setTime(savedTime);\n      }\n      setBtnState(true);\n      setIsRunning(false);\n      setShowMessage(false);\n      setCurrentRound(rounds);\n      setCurrentRest(false);\n    }\n  };\n\n  //Forward button\n  const handleClickForward = () => {\n    if (!docs) {\n      const t = Number(time);\n      if (timerType === TIMERS.stopwatch) {\n        setTime(savedTime);\n        setMessage(MESSAGES.finished);\n        setShowMessage(true);\n      }\n      if (t && timerType !== TIMERS.stopwatch) {\n        setTime(0);\n        setMessage(MESSAGES.finished);\n        setShowMessage(true);\n        setCurrentRest(false);\n      }\n      setCurrentRound(0);\n      setIsRunning(false);\n      setBtnState(true);\n    }\n  };\n\n  //Settings/ready button\n  const handleClickSettingsReady = (e) => {\n    if (!docs) {\n      const t = Number(time);\n      if (\n        e.currentTarget.value === BTNTYPE.settings ||\n        e.currentTarget.value === BTNTYPE.ready ||\n        e.currentTarget.value === BTNTYPE.back\n      ) {\n        setSettingsState(!settingsState);\n        setBtnState(true);\n        setSavedTime(time);\n        setIsRunning(false);\n        setShowTimerRounds(false);\n        setShowMessage(false);\n        setCurrentRound(rounds);\n        setCurrentRest(false);\n\n        if (timerType === TIMERS.countdown || timerType === TIMERS.stopwatch) {\n          if (timerType === TIMERS.stopwatch) {\n            setSavedTime(time);\n            setTime(0);\n          }\n          if (!t) {\n            setMessage(MESSAGES.settimer);\n            setShowSettingsMessage(true);\n          } else {\n            setShowSettingsMessage(false);\n            setShowTimerRounds(true);\n          }\n        }\n        if (timerType === TIMERS.xy || timerType === TIMERS.tabata) {\n          if (!t || rounds < 1) {\n            setMessage(MESSAGES.settimer);\n            setShowSettingsMessage(true);\n          } else {\n            setShowSettingsMessage(false);\n            setShowTimerRounds(true);\n          }\n        }\n      }\n    }\n  };\n\n  //start the timer hook\n  useTimer(timerType);\n\n  // Base strucure for all timers\n  if (!settingsState) {\n    return (\n      <Panel timerType={timerType}>\n        <UpperPanel className=\"text-center\">\n          <Title>{timerType}</Title>\n          <Button\n            styleName=\"settingsBtn\"\n            onClick={handleClickSettingsReady}\n            value={BTNTYPE.settings}\n          ></Button>\n          <i className={`bi bi-stopwatch stopwatch ${!isRunning}`}></i>\n        </UpperPanel>\n        <Middlepanel>\n          <div className=\"container\">\n            <div className=\"row col text-center\">\n              {showSettingsMessage ? (\n                <>\n                  <Button\n                    styleName=\"ctaBtn\"\n                    onClick={handleClickSettingsReady}\n                    value={BTNTYPE.settings}\n                    inner={message + \" \"}\n                  ></Button>\n                </>\n              ) : showMessage ? (\n                <Message> {message}</Message>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n        </Middlepanel>\n        <LowerPanel className=\"d-flex align-items-center\">\n          <div className=\"container\">\n            <div className=\"row col text-center\">\n              {showTimerRounds &&\n              // currentRound > 1 &&\n              (timerType === TIMERS.xy || timerType === TIMERS.tabata) ? (\n                <Message>\n                  {\" \"}\n                  {currentRound}/{rounds} rounds left\n                </Message>\n              ) : (\n                <Message>\n                  {timerType === TIMERS.stopwatch\n                    ? `Target: ${timerValue(savedTime)}`\n                    : timerType === TIMERS.countdown\n                    ? `Start time: ${timerValue(savedTime)}`\n                    : \" \"}\n                </Message>\n              )}\n              {showTimerRounds ? <DisplayTime value={currentRest} /> : <></>}\n            </div>\n            <div className=\"row justify-content-around\">\n              <Button\n                styleName=\"col-3\"\n                value={btnState ? BTNTYPE.start : BTNTYPE.stop}\n                onClick={handleClickStartStop}\n              ></Button>\n              <Button\n                styleName=\"col-3\"\n                value={BTNTYPE.reset}\n                onClick={handleClickReset}\n              ></Button>\n              <Button\n                styleName=\"col-3\"\n                value={BTNTYPE.forward}\n                onClick={handleClickForward}\n              ></Button>\n              <></>\n            </div>\n          </div>\n        </LowerPanel>\n      </Panel>\n    );\n  }\n  return (\n    <Panel timerType={timerType}>\n      <SettingsPanel className=\"settingspanel text-center d-flex align-items-center justify-content-center\">\n        <Button\n          styleName=\"backBtn\"\n          onClick={handleClickSettingsReady}\n          value={BTNTYPE.back}\n        ></Button>\n        <Settings styleName=\"p-2\" timerType={timerType}></Settings>\n        {time > 0 && timerType !== TIMERS.tabata ? (\n          <Button\n            styleName=\"readyBtn\"\n            value={BTNTYPE.ready}\n            onClick={handleClickSettingsReady}\n          ></Button>\n        ) : rest > 0 ? (\n          <Button\n            styleName=\"readyBtn\"\n            value={BTNTYPE.ready}\n            onClick={handleClickSettingsReady}\n          ></Button>\n        ) : (\n          <Button\n            styleName=\"notReadyBtn\"\n            value={BTNTYPE.notReady}\n            disabled={true}\n            onClick={handleClickSettingsReady}\n          ></Button>\n        )}\n      </SettingsPanel>\n    </Panel>\n  );\n};\nexport default Timer;\n","import React, { useContext, useEffect } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport { NavLink } from \"react-router-dom\";\nimport { COLORS, TIMERS } from \"../../utils/helpers\";\nimport styled from \"styled-components\";\n\nconst NavList = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0.5rem 0;\n  overflow: hidden;\n  border-radius: 0.3rem 0.3rem 0rem 0rem;\n  width: 20rem;\n\n  a {\n    color: ${COLORS.text};\n    text-decoration: none;\n  }\n  .Stopwatch,\n  .Countdown,\n  .XY,\n  .Tabata {\n    background-color: ${COLORS.nav};\n    transition: 0.5s;\n  }\n  .Stopwatch:hover {\n    background-color: ${COLORS.stopwatch};\n  }\n  .Countdown:hover {\n    background-color: ${COLORS.countdown};\n  }\n  .Tabata:hover {\n    background-color: ${COLORS.tabata};\n  }\n  .XY:hover {\n    background-color: ${COLORS.xy};\n  }\n\n  li {\n    display: inline;\n    list-style-type: none;\n    text-decoration: none;\n    padding: 0.75rem;\n  }\n  .current {\n    .Stopwatch {\n      background-color: ${COLORS.stopwatch};\n    }\n    .Countdown {\n      background-color: ${COLORS.countdown};\n    }\n    .XY {\n      background-color: ${COLORS.xy};\n    }\n    .Tabata {\n      background-color: ${COLORS.tabata};\n    }\n  }\n  .active {\n    background-color: #04aa6d;\n  }\n`;\n\nconst links = [\n  { name: TIMERS.stopwatch, path: \"/\" },\n  { name: TIMERS.countdown, path: \"/countdown\" },\n  { name: TIMERS.xy, path: \"/xy\" },\n  { name: TIMERS.tabata, path: \"/tabata\" },\n];\n\n// The navbar is used to set the initial states for the different timers\nconst Navbar = () => {\n  const { setTime } = useContext(TimerContext);\n  const { setRounds } = useContext(TimerContext);\n  const { setRest } = useContext(TimerContext);\n  const { setIsRunning } = useContext(TimerContext);\n  const { setBtnState } = useContext(TimerContext);\n  const { setSettingsState } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n  const { setCurrentRound } = useContext(TimerContext);\n  const { setShowSettingsMessage } = useContext(TimerContext);\n  const { setShowTimerRounds } = useContext(TimerContext);\n  const { setShowMessage } = useContext(TimerContext);\n  const { setSavedTime } = useContext(TimerContext);\n  const { setCurrentRest } = useContext(TimerContext);\n  const { timerType, setTimerType } = useContext(TimerContext);\n\n  // Click handler for the navbar\n  const handleClick = (e) => {\n    if (!docs) {\n      setTime(0);\n      setRounds(1);\n      setRest(10);\n      setIsRunning(false);\n      setBtnState(true);\n      setSettingsState(true);\n      setCurrentRound(0);\n      setShowSettingsMessage(false);\n      setShowMessage(false);\n      setSavedTime(0);\n      setCurrentRest(false);\n\n      if (e.target.innerHTML === \"Stopwatch\") {\n        setShowTimerRounds(true);\n      }\n      switch (e.target.innerHTML) {\n        case \"Stopwatch\":\n          setTimerType(TIMERS.stopwatch);\n          localStorage.setItem(\"timerType\", \"Stopwatch\");\n          break;\n        case \"Countdown\":\n          setTimerType(TIMERS.countdown);\n          localStorage.setItem(\"timerType\", \"Countdown\");\n\n          break;\n        case \"XY\":\n          setTimerType(TIMERS.xy);\n          localStorage.setItem(\"timerType\", \"XY\");\n\n          break;\n        case \"Tabata\":\n          setTimerType(TIMERS.tabata);\n          localStorage.setItem(\"timerType\", \"Tabata\");\n\n          break;\n        default:\n          setTimerType(TIMERS.stopwatch);\n      }\n    }\n  };\n\n  useEffect(() => {\n    console.log(timerType);\n  }, [timerType]);\n\n  return (\n    <NavList>\n      {links.map((link, index) => (\n        <NavLink key={index} to={link.path} exact activeClassName=\"current\">\n          <li className={link.name} onClick={handleClick}>\n            {link.name}\n          </li>\n        </NavLink>\n      ))}\n    </NavList>\n  );\n};\nexport default Navbar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport Panel from \"../components/generic/Panel\";\nimport Timer from \"../components/generic/Timer\";\nimport Settings from \"../components/generic/Settings\";\nimport Navbar from \"../components/generic/Navbar\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nconst Documentation = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"medium\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Button\"\n          component={<Button />}\n          propDocs={[\n            {\n              prop: \"styleName\",\n              description: \"Has the classNames\",\n              type: \"String\",\n              defaultValue: \"none\",\n            },\n            {\n              prop: \"value\",\n              description: \"Has the button type\",\n              type: \"String\",\n              defaultValue: \"none\",\n            },\n            {\n              prop: \"onClick\",\n              description: \"Holds the clickHandler function\",\n              type: \"function\",\n              defaultValue: \"null\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"DisplayTime\"\n          component={<DisplayTime />}\n          propDocs={[{}]}\n        />\n\n        <DocumentComponent\n          title=\"Panel\"\n          component={<Panel />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"myClass\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Settings\"\n          component={<Settings />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Timer\"\n          component={<Timer />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Navbar\"\n          component={<Navbar />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Timer from \"../components/generic/Timer\";\nimport Navbar from \"../components/generic/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\n// Using the react router to create navigation\nconst App = () => {\n  const routes = [\n    {\n      path: \"/\",\n      component: Timer,\n    },\n    {\n      path: \"/assignment-3-keamarg\",\n      component: Timer,\n    },\n    {\n      path: \"/Stopwatch\",\n      component: Timer,\n    },\n    {\n      path: \"/Countdown\",\n      component: Timer,\n    },\n    {\n      path: \"/XY\",\n      component: Timer,\n    },\n    {\n      path: \"/Tabata\",\n      component: Timer,\n    },\n  ];\n\n  return (\n    <Timers>\n      <Router>\n        <Navbar />\n        <Switch>\n          {routes.map(({ path, component }, key) => (\n            <Route exact path={path} component={component} key={key} />\n          ))}\n        </Switch>\n      </Router>\n    </Timers>\n  );\n};\n\nexport default App;\n","import React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { TIMERS } from \"../utils/helpers\";\nimport Settings from \"../components/generic/Settings\";\nimport Panel from \"../components/generic/Panel\";\nimport { TimerContext } from \"../TimerProvider\";\nimport Button from \"../components/generic/Button\";\nimport { BTNTYPE, COLORS } from \"../utils/helpers.js\";\nimport { ReadyBtn, NotReadyBtn, PulseAnim2 } from \"../utils/css.js\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst AddPanel = styled.div`\n  position: relative;\n  height: 25rem;\n  font-size: 0.8rem;\n  .readyBtn {\n    ${ReadyBtn}\n  }\n  ${PulseAnim2}\n\n  .notReadyBtn {\n    ${NotReadyBtn}\n  }\n`;\n\nconst Title = styled.h1`\n  color: ${COLORS.text};\n`;\n\nconst Selector = styled.select`\n  border: 1px solid grey;\n  border-style: outset;\n  border-radius: 5px;\n  padding: 0.2rem 1rem 0.2rem 1rem;\n`;\n\nconst Add = () => {\n  const { timerType, setTimerType } = useContext(TimerContext);\n  const { time } = useContext(TimerContext);\n  const { rounds } = useContext(TimerContext);\n  const { rest } = useContext(TimerContext);\n\n  const handleChange = (e) => {\n    switch (e.target.value) {\n      case TIMERS.stopwatch:\n        setTimerType(TIMERS.stopwatch);\n        localStorage.setItem(\"timerType\", \"Stopwatch\");\n        break;\n      case TIMERS.countdown:\n        setTimerType(TIMERS.countdown);\n        localStorage.setItem(\"timerType\", \"Countdown\");\n        break;\n      case TIMERS.xy:\n        setTimerType(TIMERS.xy);\n        localStorage.setItem(\"timerType\", \"XY\");\n        break;\n      case TIMERS.tabata:\n        setTimerType(TIMERS.tabata);\n        localStorage.setItem(\"timerType\", \"Tabata\");\n        break;\n      default:\n    }\n  };\n\n  const handleClick = (e) => {\n    console.log(e.target);\n  };\n\n  useEffect(() => {\n    console.log(timerType);\n  }, [timerType]);\n\n  console.log(\n    \"Type: \" +\n      timerType +\n      \" Time: \" +\n      time +\n      \" Rounds: \" +\n      rounds +\n      \" Rest: \" +\n      rest\n  );\n  return (\n    <Container>\n      <Panel>\n        <AddPanel className=\"text-center\">\n          <Title>Add timer</Title>\n          <Selector\n            name=\"timers\"\n            id=\"timers\"\n            value={timerType}\n            onChange={handleChange}\n          >\n            <option value={TIMERS.stopwatch}>Stopwatch</option>\n            <option value={TIMERS.countdown}>Countdown</option>\n            <option value={TIMERS.xy}>XY</option>\n            <option value={TIMERS.tabata}>Tabata</option>\n          </Selector>\n          <div className=\"text-center\">\n            <Settings></Settings>\n          </div>\n          {time > 0 && timerType !== TIMERS.tabata ? (\n            <Button\n              styleName=\"readyBtn\"\n              value={BTNTYPE.add}\n              onClick={handleClick}\n            ></Button>\n          ) : time > 0 && rest > 0 ? (\n            <Button\n              styleName=\"readyBtn\"\n              value={BTNTYPE.add}\n              onClick={handleClick}\n            ></Button>\n          ) : (\n            <Button\n              styleName=\"notReadyBtn\"\n              value={BTNTYPE.notReady}\n              disabled={true}\n              onClick={handleClick}\n            ></Button>\n          )}\n        </AddPanel>\n      </Panel>\n    </Container>\n  );\n};\n\nexport default Add;\n","import React, { useContext } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { TimerContext } from \"./TimerProvider\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AddView from \"./views/AddView\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\n// Clichandler for setting a variable, that helps avoid problems when clicking on components in the docs view\nconst App = () => {\n  const handleClick = (e) => {\n    if (e.target.innerHTML === \"Documentation\") {\n      setDocs(true);\n    } else {\n      setDocs(false);\n    }\n  };\n  const { setDocs } = useContext(TimerContext);\n\n  return (\n    <Container>\n      <Router>\n        <nav>\n          <ul>\n            <li id=\"timers\" onClick={handleClick}>\n              <Link to=\"/\">Timers</Link>\n            </li>\n            <li value=\"docs\" onClick={handleClick}>\n              <Link to=\"/docs\">Documentation</Link>\n            </li>\n            <li value=\"add\" onClick={handleClick}>\n              <Link to=\"/add\">Add</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/add\">\n            <AddView />\n          </Route>\n          <Route path=\"/docs\">\n            <DocumentationView />\n          </Route>\n          <Route path=\"/\">\n            <TimersView />\n          </Route>\n        </Switch>\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport TimerProvider from \"./TimerProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimerProvider>\n      <App />\n    </TimerProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}