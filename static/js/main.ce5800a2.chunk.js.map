{"version":3,"sources":["TimerProvider.js","components/documentation/DocumentComponent.js","components/generic/Loading.js","utils/helpers.js","components/generic/Button.js","components/generic/DisplayTime.js","components/generic/Panel.js","components/generic/Settings.js","utils/hooks.js","components/generic/Timer.js","components/generic/Navbar.js","views/DocumentationView.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","views/AddView.js","App.js","index.js"],"names":["TimerContext","createContext","setBtnState","console","log","setSettingsState","TimerProvider","children","useState","btnState","settingsState","time","setTime","rounds","setRounds","rest","setRest","isRunning","setIsRunning","savedTime","setSavedTime","docs","setDocs","message","setMessage","showMessage","setShowMessage","currentRound","setCurrentRound","showSettingsMessage","setShowSettingsMessage","showTimerRounds","setShowTimerRounds","currentRest","setCurrentRest","Provider","value","Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","props","title","component","propDocs","map","doc","i","prop","description","type","defaultValue","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","defaultProps","COLORS","BUTTONS","reset","start","stop","settings","forward","ready","BTNTYPE","TIMERS","INPUTS","MESSAGES","timerValue","fullTime","Date","toISOString","substr","Btn","button","Button","styleName","onClick","inner","className","Display","label","DisplayTime","useContext","style","Panel","timerType","SetInput","input","Text","p","Settings","handleChange","e","target","name","htmlFor","min","max","step","onChange","useTimer","delay","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Number","getMessage","h1","UpperPanel","LowerPanel","Middlepanel","SettingsPanel","Message","Timer","handleClick","t","currentTarget","NavList","ul","links","path","Navbar","innerHTML","link","index","to","exact","activeClassName","Stopwatch","CountDown","XY","Tabata","Timers","App","routes","Countdown","key","Add","AddView","DocumentationView","TimersView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce5800a2.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const TimerContext = createContext({\n  setBtnState: () => {\n    console.log(\"setBtnState: Im outside the Timerprovider\");\n  },\n  setSettingsState: () => {\n    console.log(\"setSettingsState: Im outside the Timerprovider\");\n  },\n});\n\n// I had different experiments going, but ended up wrapping one big provider around the whole app.\n\nconst TimerProvider = ({ children }) => {\n  const [btnState, setBtnState] = useState(true);\n  const [settingsState, setSettingsState] = useState(true);\n  // const [stopwatchTimer, setStopwatchTimer] = useState(true);\n  // const [stopwatchSettings, setStopwatchSettings] = useState(false);\n  // const [countdownTimer, setCountdownTimer] = useState(true);\n  // const [countdownSettings, setCountdownSettings] = useState(false);\n  // const [xyTimer, setXyTimer] = useState(true);\n  // const [xySettings, setXySettings] = useState(false);\n  // const [tabataTimer, setTabataTimer] = useState(true);\n  // const [tabataSettings, setTabataSettings] = useState(false);\n  const [time, setTime] = useState(0);\n  const [rounds, setRounds] = useState(1);\n  const [rest, setRest] = useState(10);\n  const [isRunning, setIsRunning] = useState(false);\n  const [savedTime, setSavedTime] = useState(0);\n  const [docs, setDocs] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showMessage, setShowMessage] = useState(false);\n  const [currentRound, setCurrentRound] = useState(rounds);\n  const [showSettingsMessage, setShowSettingsMessage] = useState(false);\n  const [showTimerRounds, setShowTimerRounds] = useState(true);\n  const [currentRest, setCurrentRest] = useState(false);\n\n  return (\n    <TimerContext.Provider\n      value={{\n        currentRest,\n        setCurrentRest,\n        showTimerRounds,\n        setShowTimerRounds,\n        showSettingsMessage,\n        setShowSettingsMessage,\n        currentRound,\n        setCurrentRound,\n        message,\n        setMessage,\n        showMessage,\n        setShowMessage,\n        docs,\n        setDocs,\n        savedTime,\n        setSavedTime,\n        isRunning,\n        setIsRunning,\n        time,\n        setTime,\n        rounds,\n        setRounds,\n        rest,\n        setRest,\n        btnState,\n        setBtnState,\n        settingsState,\n        setSettingsState,\n        // stopwatchTimer,\n        // setStopwatchTimer,\n        // stopwatchSettings,\n        // setStopwatchSettings,\n        // countdownTimer,\n        // setCountdownTimer,\n        // countdownSettings,\n        // setCountdownSettings,\n        // xyTimer,\n        // setXyTimer,\n        // xySettings,\n        // setXySettings,\n        // tabataTimer,\n        // setTabataTimer,\n        // tabataSettings,\n        // setTabataSettings,\n      }}\n    >\n      {children}\n    </TimerContext.Provider>\n  );\n};\n\nexport default TimerProvider;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = (props) => {\n  return (\n    <Wrapper>\n      <Title>{props.title}</Title>\n      <Container>\n        <RenderComponent>{props.component}</RenderComponent>\n        <Documentation>\n          <tbody>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </tbody>\n          {props.propDocs.map((doc, i) => {\n            return (\n              <tbody key={i}>\n                <tr>\n                  <td>{doc.prop}</td>\n                  <td>{doc.description}</td>\n                  <td>{doc.type}</td>\n                  <td>\n                    <code>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              </tbody>\n            );\n          })}\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = (props) => {\n  const size = sizeMapping[props.size];\n  const { color } = props;\n\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n    </Container>\n  );\n};\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\n//Colors used\nexport const COLORS = {\n  countdown: \"#316E94\",\n  stopwatch: \"#3FA2E0\",\n  xy: \"#E0BB34\",\n  tabata: \"#4E1394\",\n  purple: \"#7C28E0\",\n  start: \"#26DB5C\",\n  stop: \"#DB4E4E\",\n  reset: \"#2F333B\",\n  text: \"#FAF9F6\",\n  nav: \"#231F20\",\n};\n\n//Bootstrap icons for the buttons\nexport const BUTTONS = {\n  reset: \"bi bi-arrow-counterclockwise\",\n  start: \"bi bi-play-circle\",\n  stop: \"bi bi-pause-circle\",\n  settings: \"bi bi-list\",\n  forward: \"bi bi-skip-forward-circle\",\n  ready: \"bi bi-check2-circle\",\n};\n\nexport const BTNTYPE = {\n  reset: \"reset\",\n  start: \"start\",\n  stop: \"stop\",\n  settings: \"settings\",\n  forward: \"forward\",\n  ready: \"ready\",\n};\n\nexport const TIMERS = {\n  stopwatch: \"Stopwatch\",\n  countdown: \"Countdown\",\n  xy: \"XY\",\n  tabata: \"Tabata\",\n};\n\nexport const INPUTS = {\n  timer: \"timer\",\n  rounds: \"rounds\",\n  rest: \"rest\",\n};\n\nexport const MESSAGES = {\n  finished: \"Well done!\",\n  settimer: \"Check your settings\",\n  rest: \"Rest now\",\n  work: \"Work!\",\n  work2: \"Back to work!\",\n  boost1: \"Almost there!\",\n  boost2: \"That's more like it!\",\n  boost3: \"Ya call that working?\",\n  boost4: \"Come on!\",\n  boost5: \"Keep going!\",\n};\n\n// Function for converting the seconds to a more human friendly format\nexport const timerValue = (value) => {\n  const fullTime = new Date(value * 1000).toISOString();\n  const hours = fullTime.substr(12, 1);\n  const minutes = fullTime.substr(14, 2);\n  const seconds = fullTime.substr(17, 2);\n  return hours + \"h \" + minutes + \"m \" + seconds + \"s\";\n};\n\n// Function providing messages\nexport const getMessage = (currentRound) => {\n  switch (currentRound) {\n    case 1:\n      return MESSAGES.finished;\n    case 2:\n      return MESSAGES.boost1;\n    case 3:\n      return MESSAGES.boost2;\n    case 4:\n      return MESSAGES.boost3;\n    case 5:\n      return MESSAGES.boost4;\n    default:\n      return MESSAGES.boost5;\n  }\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { COLORS, BUTTONS, BTNTYPE } from \"../../utils/helpers\";\n\nconst Btn = styled.button`\n  border-radius: 0.3rem;\n  border: none;\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: ${COLORS.text};\n  transition: 0.2s ease;\n  :hover {\n    opacity: 0.6;\n  }\n\n  background-color: ${(props) =>\n    props.value === BTNTYPE.start\n      ? COLORS.start\n      : props.value === BTNTYPE.stop\n      ? COLORS.stop\n      : COLORS.reset};\n`;\n\nconst Button = (props) => {\n  Button.defaultProps = {\n    styleName: \"none\",\n    value: \"none\",\n    onClick: null,\n  };\n  const { value, styleName, onClick, inner } = props;\n  return (\n    <Btn className={styleName} value={value} onClick={onClick}>\n      {inner}\n      <i className={BUTTONS[value] ? BUTTONS[value] : BUTTONS.start}></i>\n    </Btn>\n  );\n};\nButton.propTypes = {\n  styleName: PropTypes.string,\n  value: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport styled from \"styled-components\";\nimport { timerValue, COLORS } from \"../../utils/helpers.js\";\n\nconst Display = styled.label`\n  margin-bottom: 2rem;\n  font-size: 3rem;\n  font-weight: 300;\n  // font-family: \"Orbitron\", sans-serif;\n`;\n\nconst DisplayTime = () => {\n  const { time } = useContext(TimerContext);\n  const { currentRest } = useContext(TimerContext);\n\n  return (\n    <Display style={{ color: `${currentRest ? COLORS.stop : COLORS.text}` }}>\n      {timerValue(time)}\n    </Display>\n  );\n};\n\nexport default DisplayTime;\n\n// import React, { useContext } from \"react\";\n// import { TimerContext } from \"../../TimerProvider\";\n// import styled from \"styled-components\";\n// import { timerValue, COLORS } from \"../../utils/helpers.js\";\n\n// const Display = styled.label`\n//   margin-bottom: 2rem;\n//   font-size: 3rem;\n//   font-weight: 300;\n//   // font-family: \"Orbitron\", sans-serif;\n//   color: white;\n//   color: ${(props) => (props.value ? COLORS.stop : COLORS.text)};\n// `;\n\n// const DisplayTime = (props) => {\n//   DisplayTime.defaultProps = {\n//     value: \"none\",\n//   };\n//   const { value } = props;\n//   const { time } = useContext(TimerContext);\n\n//   return <Display value={value}>{timerValue(time)}</Display>;\n// };\n\n// export default DisplayTime;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { COLORS, TIMERS } from \"../../utils/helpers.js\";\n\nconst Container = styled.div`\n  // border: 1px solid black;\n  width: 20rem;\n  background-color: ${(props) =>\n    props.type === TIMERS.stopwatch\n      ? COLORS.stopwatch\n      : props.type === TIMERS.countdown\n      ? COLORS.countdown\n      : props.type === TIMERS.xy\n      ? COLORS.xy\n      : COLORS.tabata};\n  font-size: 2rem;\n  border-radius: 0rem 0rem 0.3rem 0.3rem;\n`;\n\nconst Panel = (props) => {\n  Panel.defaultProps = {\n    timerType: \"Stopwatch\",\n  };\n  return (\n    <Container type={props.timerType} className=\"mainPanel\">\n      {props.children}\n    </Container>\n  );\n};\n\nPanel.propTypes = {\n  timerType: PropTypes.string,\n};\n\nexport default Panel;\n","import styled from \"styled-components\";\nimport { INPUTS, TIMERS, timerValue } from \"../../utils/helpers.js\";\nimport PropTypes from \"prop-types\";\nimport { COLORS } from \"../../utils/helpers.js\";\nimport React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\n\nconst SetInput = styled.input`\n  // border: 1px solid black;\n  color: ${(props) =>\n    props.type === TIMERS.stopwatch\n      ? COLORS.stopwatch\n      : props.type === TIMERS.countdown\n      ? COLORS.countdown\n      : props.type === TIMERS.xy\n      ? COLORS.xy\n      : COLORS.tabata};\n  font-size: 0.8rem;\n  border-radius: 0.5rem;\n  border: 0px;\n`;\n\n// const Credentials = styled.p`\n//   font-size: 0.8rem;\n//   color: ${COLORS.text};\n//   padding-top: 0.5rem;\n// `;\n\nconst Text = styled.p`\n  font-size: 1rem;\n  color: ${COLORS.text};\n  padding-top: 0.5rem;\n  margin-block-start: 0;\n  margin-block-end: 0;\n`;\n\nconst Settings = (props) => {\n  const { timerType } = props;\n\n  Settings.defaultProps = {\n    timerType: TIMERS.countdown,\n  };\n\n  const { time, setTime } = useContext(TimerContext);\n  const { rounds, setRounds } = useContext(TimerContext);\n  const { rest, setRest } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n\n  //Changehandler for all settings\n  const handleChange = (e) => {\n    if (!docs) {\n      if (e.target.name === INPUTS.timer) {\n        setTime(e.target.value);\n      } else if (e.target.name === INPUTS.rounds) {\n        setRounds(e.target.value);\n      } else {\n        setRest(e.target.value);\n      }\n    }\n  };\n\n  return (\n    <div className=\"w-75\">\n      {/* {timerType !== TIMERS.stopwatch ? ( */}\n      <>\n        <Text>\n          <label htmlFor=\"timer\">Set workout time</label>\n          <br />\n          {timerValue(time)}\n        </Text>\n        <SetInput\n          name=\"timer\"\n          type=\"range\"\n          min=\"0\"\n          max=\"7200\"\n          step=\"2\"\n          value={time}\n          onChange={handleChange}\n        ></SetInput>\n      </>\n      {/* ) : null} */}\n      {timerType === TIMERS.xy || timerType === TIMERS.tabata ? (\n        <>\n          <Text>\n            <label htmlFor=\"rounds\">Set number of rounds</label>\n            <br />\n            {rounds}\n          </Text>\n          <SetInput\n            name=\"rounds\"\n            type=\"range\"\n            min=\"1\"\n            max=\"5\"\n            step=\"1\"\n            value={rounds}\n            onChange={handleChange}\n          ></SetInput>\n        </>\n      ) : null}\n      {props.timerType === TIMERS.tabata ? (\n        <>\n          <Text>\n            <label htmlFor=\"rest\">Set rest time</label>\n            <br />\n            {timerValue(rest).substr(4, 6)}\n          </Text>\n          <SetInput\n            name=\"rest\"\n            type=\"range\"\n            min=\"2\"\n            max=\"300\"\n            step=\"5\"\n            value={rest}\n            onChange={handleChange}\n          ></SetInput>\n        </>\n      ) : null}\n      {/* <Credentials>By Martin Gundtoft</Credentials> */}\n    </div>\n  );\n};\n\nSettings.propTypes = {\n  timerType: PropTypes.string,\n};\n\nexport default Settings;\n","import { useContext, useRef, useEffect, useState } from \"react\";\nimport { TimerContext } from \"../TimerProvider\";\nimport { TIMERS, getMessage, MESSAGES } from \"./helpers\";\n\nexport const useTimer = (timerType) => {\n  const [delay] = useState(1000);\n  const { isRunning, setIsRunning } = useContext(TimerContext);\n  const { time, setTime } = useContext(TimerContext);\n  const { setBtnState } = useContext(TimerContext);\n  const { setShowMessage } = useContext(TimerContext);\n  const { setMessage } = useContext(TimerContext);\n  const { currentRound, setCurrentRound } = useContext(TimerContext);\n  const { savedTime } = useContext(TimerContext);\n  const { currentRest, setCurrentRest } = useContext(TimerContext);\n  const { rest } = useContext(TimerContext);\n\n  // Code inspired by the article Nico shared (reference in readme)\n  useInterval(\n    () => {\n      if (timerType === TIMERS.stopwatch) {\n        setTime(Number(time) + 1);\n        //Assigment 3 stopwatch fix\n        if (Number(time) === Number(savedTime) - 1) {\n          setIsRunning(false);\n          setBtnState(true);\n          setMessage(MESSAGES.finished);\n          setShowMessage(true);\n        }\n      } else {\n        if (Number(time) > 0) {\n          setTime(Number(time) - 1);\n        } else {\n          setIsRunning(false);\n          setBtnState(true);\n\n          setShowMessage(true);\n          if (timerType === TIMERS.countdown) {\n            setMessage(MESSAGES.finished);\n          } else {\n            setMessage(getMessage(currentRound));\n          }\n        }\n        if (timerType === TIMERS.xy) {\n          if (Number(time) === 0 && currentRound > 1) {\n            setCurrentRound((rounds) => rounds - 1);\n            setTime(savedTime - 1);\n            setIsRunning(true);\n            setBtnState(false);\n          } else if (Number(time) === 0 && currentRound === 1) {\n            setCurrentRound(0);\n          }\n        }\n        if (timerType === TIMERS.tabata && currentRound > 0) {\n          if (!currentRest) {\n            setShowMessage(true);\n            setMessage(MESSAGES.work);\n          }\n          if (Number(time) === 0 && currentRound > 0) {\n            setCurrentRest(!currentRest);\n            setMessage(MESSAGES.rest);\n            setTime(rest - 1);\n            setIsRunning(true);\n            setBtnState(false);\n            if (currentRest) {\n              setMessage(MESSAGES.work2);\n              setCurrentRound((rounds) => rounds - 1);\n              setTime(savedTime - 1);\n              if (currentRound === 1) {\n                setIsRunning(false);\n                setTime(0);\n                setCurrentRound(0);\n                setBtnState(true);\n                setMessage(MESSAGES.finished);\n                setShowMessage(true);\n                setCurrentRest(false);\n              }\n            }\n          }\n        }\n      }\n    },\n    isRunning ? delay : null\n  );\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest function.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n};\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport styled from \"styled-components\";\nimport Panel from \"../generic/Panel\";\nimport Settings from \"../generic/Settings\";\nimport Button from \"../generic/Button\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport {\n  BTNTYPE,\n  COLORS,\n  TIMERS,\n  MESSAGES,\n  timerValue,\n} from \"../../utils/helpers\";\nimport { useTimer } from \"../../utils/hooks\";\n\nconst Title = styled.h1`\n  color: ${COLORS.text};\n`;\nconst UpperPanel = styled.div`\n  position: relative;\n  height: 15rem;\n  .false {\n    color: ${COLORS.stop};\n    animation: pulse 1.2s ease infinite, color 0.3s ease;\n  }\n\n  @keyframes pulse {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.1);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n\n  @keyframes color {\n    0% {\n      color: black;\n    }\n    100% {\n      color: ${COLORS.stop};\n    }\n  }\n\n  i.stopwatch {\n    font-size: 10rem;\n    opacity: 40%;\n    display: block;\n  }\n  .settingsBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    // display: block;\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    background-color: transparent;\n  }\n`;\nconst LowerPanel = styled.div`\n  height: 15rem;\n  .ctaBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    background-color: transparent;\n  }\n`;\nconst Middlepanel = styled.div`\n  height: 5rem;\n  padding-top: 4rem;\n  .ctaBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    background-color: transparent;\n    line-height: 1rem;\n  }\n`;\n\nconst SettingsPanel = styled.div`\n  position: relative;\n  height: 25rem;\n  .settingsBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    background-color: transparent;\n  }\n  .readyBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    position: absolute;\n    bottom: 1rem;\n    margin: 0 auto;\n    background-color: transparent;\n  }\n`;\nconst Message = styled.p`\n  color: ${COLORS.text};}\n  line-height: 2rem;\n  font-size:1.5rem;\n`;\n\nconst Timer = (props) => {\n  const { time, setTime } = useContext(TimerContext);\n  const { isRunning, setIsRunning } = useContext(TimerContext);\n  const { btnState, setBtnState } = useContext(TimerContext);\n  const { settingsState, setSettingsState } = useContext(TimerContext);\n  const { savedTime, setSavedTime } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n  const { rounds } = useContext(TimerContext);\n  const { currentRound, setCurrentRound } = useContext(TimerContext);\n  const { message, setMessage } = useContext(TimerContext);\n  const { showMessage, setShowMessage } = useContext(TimerContext);\n  const { showSettingsMessage, setShowSettingsMessage } =\n    useContext(TimerContext);\n  const { showTimerRounds, setShowTimerRounds } = useContext(TimerContext);\n  const { currentRest, setCurrentRest } = useContext(TimerContext);\n\n  const { timerType } = props;\n\n  // Click handler for all buttons\n  const handleClick = (e) => {\n    if (!docs) {\n      const t = Number(time);\n\n      // Start/stop button\n      if (\n        e.currentTarget.value === BTNTYPE.start ||\n        e.currentTarget.value === BTNTYPE.stop\n      ) {\n        if (\n          timerType === TIMERS.stopwatch &&\n          Number(time) !== Number(savedTime)\n        ) {\n          setIsRunning(!isRunning);\n          setBtnState(!btnState);\n        }\n        if (timerType !== TIMERS.stopwatch && t) {\n          setIsRunning(!isRunning);\n          setBtnState(!btnState);\n        }\n      }\n\n      //Reset button\n      if (e.currentTarget.value === BTNTYPE.reset) {\n        if (timerType === TIMERS.stopwatch) {\n          setTime(0);\n        } else {\n          setTime(savedTime);\n        }\n        setBtnState(true);\n        setIsRunning(false);\n        setShowMessage(false);\n        setCurrentRound(rounds);\n        setCurrentRest(false);\n      }\n\n      //Forward button\n      if (e.currentTarget.value === BTNTYPE.forward) {\n        if (timerType === TIMERS.stopwatch) {\n          setTime(savedTime);\n          setMessage(MESSAGES.finished);\n          setShowMessage(true);\n        }\n        if (t && timerType !== TIMERS.stopwatch) {\n          setTime(0);\n          setMessage(MESSAGES.finished);\n          setShowMessage(true);\n          setCurrentRest(false);\n        }\n        setCurrentRound(0);\n      }\n\n      //Settings/ready button\n      if (\n        e.currentTarget.value === BTNTYPE.settings ||\n        e.currentTarget.value === BTNTYPE.ready\n      ) {\n        setSettingsState(!settingsState);\n        setBtnState(true);\n        setSavedTime(time);\n        setIsRunning(false);\n        setShowTimerRounds(false);\n        setShowMessage(false);\n        setCurrentRound(rounds);\n        setCurrentRest(false);\n\n        if (timerType === TIMERS.countdown || timerType === TIMERS.stopwatch) {\n          if (timerType === TIMERS.stopwatch) {\n            setSavedTime(time);\n            setTime(0);\n          }\n          if (!t) {\n            setMessage(MESSAGES.settimer);\n            setShowSettingsMessage(true);\n          } else {\n            setShowSettingsMessage(false);\n            setShowTimerRounds(true);\n          }\n        }\n        if (timerType === TIMERS.xy || timerType === TIMERS.tabata) {\n          if (!t || rounds < 1) {\n            setMessage(MESSAGES.settimer);\n            setShowSettingsMessage(true);\n          } else {\n            setShowSettingsMessage(false);\n            setShowTimerRounds(true);\n          }\n        }\n      }\n    }\n  };\n\n  //start the timer hook\n  useTimer(timerType);\n\n  // Base strucure for all timers\n  if (!settingsState) {\n    return (\n      <Panel timerType={timerType}>\n        <UpperPanel className=\"text-center\">\n          <Title>{timerType}</Title>\n          {/* {timerType !== TIMERS.stopwatch ? ( */}\n          <Button\n            styleName=\"settingsBtn\"\n            onClick={handleClick}\n            value={BTNTYPE.settings}\n          ></Button>\n          {/* ) : null} */}\n          <i className={`bi bi-stopwatch stopwatch ${!isRunning}`}></i>\n        </UpperPanel>\n        <Middlepanel>\n          <div className=\"container\">\n            <div className=\"row col text-center\">\n              {showSettingsMessage ? (\n                <>\n                  <Button\n                    styleName=\"ctaBtn\"\n                    onClick={handleClick}\n                    value={BTNTYPE.settings}\n                    inner={message + \" \"}\n                  ></Button>\n                </>\n              ) : showMessage ? (\n                <Message> {message}</Message>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n        </Middlepanel>\n        <LowerPanel className=\"d-flex align-items-center\">\n          <div className=\"container\">\n            <div className=\"row col text-center\">\n              {showTimerRounds &&\n              // currentRound > 1 &&\n              (timerType === TIMERS.xy || timerType === TIMERS.tabata) ? (\n                <Message>\n                  {\" \"}\n                  {currentRound}/{rounds} rounds left\n                </Message>\n              ) : (\n                <Message>\n                  {timerType === TIMERS.stopwatch\n                    ? `Target: ${timerValue(savedTime)}`\n                    : timerType === TIMERS.countdown\n                    ? `Start time: ${timerValue(savedTime)}`\n                    : \" \"}\n                </Message>\n              )}\n              {/* {timerType === TIMERS.stopwatch ? (\n                <Message>Target: {timerValue(savedTime)}</Message>\n              ) : (\n                <></>\n              )} */}\n              {showTimerRounds ? <DisplayTime value={currentRest} /> : <></>}\n            </div>\n            <div className=\"row justify-content-around\">\n              <Button\n                styleName=\"col-3\"\n                value={btnState ? BTNTYPE.start : BTNTYPE.stop}\n                onClick={handleClick}\n              ></Button>\n              <Button\n                styleName=\"col-3\"\n                value={BTNTYPE.reset}\n                onClick={handleClick}\n              ></Button>\n              {/* {timerType !== TIMERS.stopwatch ? ( */}\n              <Button\n                styleName=\"col-3\"\n                value={BTNTYPE.forward}\n                onClick={handleClick}\n              ></Button>\n              {/* ) : ( */}\n              <></>\n              {/* )} */}\n            </div>\n          </div>\n        </LowerPanel>\n      </Panel>\n    );\n  }\n  return (\n    <Panel timerType={timerType}>\n      <SettingsPanel className=\"settingspanel text-center d-flex align-items-center justify-content-center\">\n        <Button\n          styleName=\"settingsBtn\"\n          onClick={handleClick}\n          value={BTNTYPE.settings}\n        ></Button>\n        <Settings styleName=\"p-2\" timerType={timerType}></Settings>\n        {time > 0 ? (\n          <Button\n            styleName=\"readyBtn\"\n            value={\"ready\"}\n            onClick={handleClick}\n          ></Button>\n        ) : (\n          <></>\n        )}\n      </SettingsPanel>\n    </Panel>\n  );\n};\nexport default Timer;\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport { NavLink } from \"react-router-dom\";\nimport { COLORS, TIMERS } from \"../../utils/helpers\";\nimport styled from \"styled-components\";\n\nconst NavList = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0.5rem 0;\n  overflow: hidden;\n  border-radius: 0.3rem 0.3rem 0rem 0rem;\n  width: 20rem;\n\n  a {\n    color: ${COLORS.text};\n    text-decoration: none;\n  }\n  .Stopwatch,\n  .Countdown,\n  .XY,\n  .Tabata {\n    background-color: ${COLORS.nav};\n    transition: 0.5s;\n  }\n  .Stopwatch:hover {\n    background-color: ${COLORS.stopwatch};\n  }\n  .Countdown:hover {\n    background-color: ${COLORS.countdown};\n  }\n  .Tabata:hover {\n    background-color: ${COLORS.tabata};\n  }\n  .XY:hover {\n    background-color: ${COLORS.xy};\n  }\n\n  li {\n    display: inline;\n    list-style-type: none;\n    text-decoration: none;\n    padding: 0.75rem;\n  }\n  .current {\n    .Stopwatch {\n      background-color: ${COLORS.stopwatch};\n    }\n    .Countdown {\n      background-color: ${COLORS.countdown};\n    }\n    .XY {\n      background-color: ${COLORS.xy};\n    }\n    .Tabata {\n      background-color: ${COLORS.tabata};\n    }\n  }\n  .active {\n    background-color: #04aa6d;\n  }\n`;\n\nconst links = [\n  { name: TIMERS.stopwatch, path: \"/\" },\n  { name: TIMERS.countdown, path: \"/countdown\" },\n  { name: TIMERS.xy, path: \"/xy\" },\n  { name: TIMERS.tabata, path: \"/tabata\" },\n];\n\n// The navbar is used to set the initial states for the different timers\nconst Navbar = () => {\n  const { setTime } = useContext(TimerContext);\n  const { setRounds } = useContext(TimerContext);\n  const { setRest } = useContext(TimerContext);\n  const { setIsRunning } = useContext(TimerContext);\n  const { setBtnState } = useContext(TimerContext);\n  const { setSettingsState } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n  const { setCurrentRound } = useContext(TimerContext);\n  const { setShowSettingsMessage } = useContext(TimerContext);\n  const { setShowTimerRounds } = useContext(TimerContext);\n  const { setShowMessage } = useContext(TimerContext);\n  const { setSavedTime } = useContext(TimerContext);\n  const { setCurrentRest } = useContext(TimerContext);\n\n  // Click handler for the navbar\n  const handleClick = (e) => {\n    if (!docs) {\n      setTime(0);\n      setRounds(1);\n      setRest(10);\n      setIsRunning(false);\n      setBtnState(true);\n      setSettingsState(true);\n      setCurrentRound(0);\n      setShowSettingsMessage(false);\n      setShowMessage(false);\n      setSavedTime(0);\n      setCurrentRest(false);\n\n      if (e.target.innerHTML === \"Stopwatch\") {\n        setShowTimerRounds(true);\n      }\n    }\n  };\n\n  return (\n    <NavList>\n      {links.map((link, index) => (\n        <NavLink key={index} to={link.path} exact activeClassName=\"current\">\n          <li className={link.name} onClick={handleClick}>\n            {link.name}\n          </li>\n        </NavLink>\n      ))}\n    </NavList>\n  );\n};\nexport default Navbar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport Panel from \"../components/generic/Panel\";\nimport Timer from \"../components/generic/Timer\";\nimport Settings from \"../components/generic/Settings\";\nimport Navbar from \"../components/generic/Navbar\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nconst Documentation = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"medium\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Button\"\n          component={<Button />}\n          propDocs={[\n            {\n              prop: \"styleName\",\n              description: \"Has the classNames\",\n              type: \"String\",\n              defaultValue: \"none\",\n            },\n            {\n              prop: \"value\",\n              description: \"Has the button type\",\n              type: \"String\",\n              defaultValue: \"none\",\n            },\n            {\n              prop: \"onClick\",\n              description: \"Holds the clickHandler function\",\n              type: \"function\",\n              defaultValue: \"null\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"DisplayTime\"\n          component={<DisplayTime />}\n          propDocs={[{}]}\n        />\n\n        <DocumentComponent\n          title=\"Panel\"\n          component={<Panel />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"myClass\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Settings\"\n          component={<Settings />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Timer\"\n          component={<Timer />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Navbar\"\n          component={<Navbar />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst Stopwatch = () => {\n  const timerType = \"Stopwatch\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default Stopwatch;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst CountDown = () => {\n  const timerType = \"Countdown\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default CountDown;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst XY = () => {\n  const timerType = \"XY\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default XY;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst Tabata = () => {\n  const timerType = \"Tabata\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default Tabata;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport Navbar from \"../components/generic/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\n// Using the react router to create navigation\nconst App = () => {\n  const routes = [\n    {\n      path: \"/\",\n      component: Stopwatch,\n    },\n    {\n      path: \"/assignment-3-keamarg\",\n      component: Stopwatch,\n    },\n    {\n      path: \"/Stopwatch\",\n      component: Stopwatch,\n    },\n    {\n      path: \"/Countdown\",\n      component: Countdown,\n    },\n    {\n      path: \"/XY\",\n      component: XY,\n    },\n    {\n      path: \"/Tabata\",\n      component: Tabata,\n    },\n  ];\n\n  return (\n    <Timers>\n      <Router>\n        <Navbar />\n        <Switch>\n          {routes.map(({ path, component }, key) => (\n            <Route exact path={path} component={component} key={key} />\n          ))}\n        </Switch>\n      </Router>\n    </Timers>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nconst Add = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Add</Title>\n      </div>\n    </Container>\n  );\n};\n\nexport default Add;\n","import React, { useContext } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { TimerContext } from \"./TimerProvider\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\nimport AddView from \"./views/AddView\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\n// Clichandler for setting a variable, that helps avoid problems when clicking on components in the docs view\nconst App = () => {\n  const handleClick = (e) => {\n    if (e.target.innerHTML === \"Documentation\") {\n      setDocs(true);\n    } else {\n      setDocs(false);\n    }\n  };\n  const { setDocs } = useContext(TimerContext);\n\n  return (\n    <Container>\n      <Router>\n        <nav>\n          <ul>\n            <li id=\"timers\" onClick={handleClick}>\n              <Link to=\"/\">Timers</Link>\n            </li>\n            <li value=\"docs\" onClick={handleClick}>\n              <Link to=\"/docs\">Documentation</Link>\n            </li>\n            <li value=\"add\" onClick={handleClick}>\n              <Link to=\"/add\">Add</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/add\">\n            <AddView />\n          </Route>\n          <Route path=\"/docs\">\n            <DocumentationView />\n          </Route>\n          <Route path=\"/\">\n            <TimersView />\n          </Route>\n        </Switch>\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport TimerProvider from \"./TimerProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimerProvider>\n      <App />\n    </TimerProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}